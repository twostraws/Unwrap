[
    {
        "question": "Write a function that accepts two strings and returns true if they are both the same regardless of what letter case they use.",
        "hint": "If you make both strings lowercased using <code>lowercased()</code> you can compare the lowercased versions.",
        "startingCode": "",
        "answers": [
            "func myFunction(input1:String,input2:String) -> Bool{\noptionalreturn input1.lowercased() == input2.lowercased()\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\noptionalreturn input1.uppercased() == input2.uppercased()\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\noptionalreturn !(input1.lowercased() != input2.lowercased())\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\noptionalreturn !(input1.uppercased() != input2.uppercased())\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool = input1.lowercased() == input2.lowercased()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool\nresult = input1.lowercased() == input2.lowercased()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool = input1.uppercased() == input2.uppercased()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool\nresult = input1.uppercased() == input2.uppercased()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool = input1.lowercased() != input2.lowercased()\nreturn !result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool\nresult = input1.lowercased() != input2.lowercased()\nreturn !result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool = input1.uppercased() != input2.uppercased()\nreturn !result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nletvar result:Bool\nresult = input1.uppercased() != input2.uppercased()\nreturn !result\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.lowercased() == input2.lowercased(){\nreturn true\n}else{\nreturn false\n}\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.lowercased() == input2.lowercased(){\nreturn true\n}\nreturn false\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nguard input1.lowercased() == input2.lowercased() else { return false }\nreturn true\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.uppercased() == input2.uppercased(){\nreturn true\n}else{\nreturn false\n}\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.uppercased() == input2.uppercased(){\nreturn true\n}\nreturn false\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nguard input1.uppercased() == input2.uppercased() else { return false }\nreturn true\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.lowercased() != input2.lowercased(){\nreturn false\n}else{\nreturn true\n}\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.lowercased() != input2.lowercased(){\nreturn false\n}\nreturn true\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nguard input1.lowercased() != input2.lowercased() else { return true }\nreturn false\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.uppercased() != input2.uppercased(){\nreturn false\n}else{\nreturn true\n}\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nif input1.uppercased() != input2.uppercased(){\nreturn false\n}\nreturn true\n}",
            "func myFunction(input1:String,input2:String) -> Bool{\nguard input1.uppercased() != input2.uppercased() else { return true }\nreturn false\n}"
        ]
    },
    {
        "question": "Write a function that accepts two strings and returns them joined together. For example, sending in the strings 'car' and 'pet' should return 'carpet'.",
        "hint": "You can use <code>+</code> to join two strings together.",
        "startingCode": "",
        "answers": [
            "func myFunction(input1:String,input2:String) -> String{\noptionalreturn input1 + input2\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar result:String = input1 + input2\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar result:String\nresult = input1 + input2\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\noptionalreturn \"\\(input1)\\(input2)\"\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar result:String = \"\\(input1)\\(input2)\"\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar result:String\nresult = \"\\(input1)\\(input2)\"\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String] = [input1, input2]\nreturn array.joined()\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String]\narray = [input1, input2]\nreturn array.joined()\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String] = [input1, input2]\nletvar result:String = array.joined()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String]\narray = [input1, input2]\nletvar result:String = array.joined()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String] = [input1, input2]\nletvar result:String\nresult = array.joined()\nreturn result\n}",
            "func myFunction(input1:String,input2:String) -> String{\nletvar array:[String]\narray = [input1, input2]\nletvar result:String\nresult = array.joined()\nreturn result\n}"
        ]
    },
    {
        "question": "Write a function that accepts a string and sends back an integer of how many characters are in the string.",
        "hint": "You can use the <code>count</code> property to measure the length of the string.",
        "startingCode": "",
        "answers": [
            "func myFunction(input1:String) -> Int{\noptionalreturn input1.count\n}",
            "func myFunction(input1:String) -> Int{\nletvar result:Int = input1.count\nreturn result\n}",
            "func myFunction(input1:String) -> Int{\nletvar result:Int\nresult = input1.count\nreturn result\n}"
        ]
    },
    {
        "question": "Write a function that accepts an integer and returns that number squared. For example, sending in the number 5 will return 25.",
        "hint": "The square of a number is that number multiplied by itself",
        "startingCode": "",
        "answers": [
            "func myFunction(input1:Int) -> Int{\noptionalreturn input1 * input1\n}",
            "func myFunction(input1:Int) -> Int{\nletvar result:Int = input1 * input1\nreturn result\n}",
            "func myFunction(input1:Int) -> Int{\nletvar result:Int\n result = input1 * input1\nreturn result\n}"
        ]
    },
    {
        "question": "Write a function that accepts two Doubles and returns their product. For example, sending in <code>3, 5</code> will return 15.",
        "hint": "The product of two numbers is the numbers multiplied",
        "startingCode": "",
        "answers": [
            "func myFunction(input1:Double, input2:Double) -> Double{\noptionalreturn input1 * input2\n}",
            "func myFunction(input1:Double, input2:Double) -> Double{\nletvar result:Double = input1 * input2\nreturn result\n}",
            "func myFunction(input1:Double, input2:Double) -> Double{\nletvar result:Double\n result = input1 * input2\nreturn result\n}"
        ]
    },
    {
        "question": "Write code that goes over this array, counting the number of times it contains the number 5, then printing that total.",
        "hint": "You can solve this using a <code>for</code> loop.",
        "startingCode": "let numbers = [1, 5, 2, 5, 3, 5]",
        "answers": [
            "var total:Int = 0\nfor number in numbers{\nif number == 5{\ntotal += 1\n}\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nif number == 5{\ntotal = total + 1\n}\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nif number == 5{\ntotal += 1\n}\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nif number == 5{\ntotal = total + 1\n}\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nguard number == 5 else { continue }\ntotal += 1\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nguard number == 5 else { continue }\ntotal = total + 1\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nguard number == 5 else { continue }\ntotal += 1\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nguard number == 5 else { continue }\ntotal = total + 1\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nif number != 5{\ncontinue\n}\ntotal += 1\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nif number != 5{ continue }\ntotal += 1\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nif number != 5{\ncontinue\n}\ntotal += 1\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nif number != 5{ continue }\ntotal += 1\n}\nprint(total)",
            "var total:Int = 0\nfor number in numbers{\nif number != 5{\ncontinue\n}else{\ntotal += 1\n}\n}\nprint(total)",
            "var total:Int\ntotal = 0\nfor number in numbers{\nif number != 5{\ncontinue\n}else{\ntotal += 1\n}\n}\nprint(total)",
            "letvar filtered:[Int] = numbers.filter{optionalreturn $0 == 5}\nprint(filtered.count)",
            "letvar filtered:[Int]\nfiltered = numbers.filter{optionalreturn $0 == 5}\nprint(filtered.count)",
            "letvar total:Int = numbers.filter{optionalreturn $0 == 5}.count\nprint(total)",
            "letvar total:Int\ntotal = numbers.filter{optionalreturn $0 == 5}.count\nprint(total)",
            "letvar filtered:[Int] = numbers.filter{num in optionalreturn num == 5}\nprint(filtered.count)",
            "letvar filtered:[Int]\nfiltered = numbers.filter{num in optionalreturn num == 5}\nprint(filtered.count)",
            "letvar total:Int = numbers.filter{num in optionalreturn num == 5}.count\nprint(total)",
            "letvar total:Int\ntotal = numbers.filter{num in optionalreturn num == 5}.count\nprint(total)",
            "letvar filtered:[Int] = numbers.filter{num in\noptionalreturn num == 5\n}\nprint(filtered.count)",
            "letvar filtered:[Int]\nfiltered = numbers.filter{num in\noptionalreturn num == 5\n}\nprint(filtered.count)",
            "letvar total:Int = numbers.filter{num in\noptionalreturn num == 5\n}.count\nprint(total)",
            "letvar total:Int\ntotal = numbers.filter{num in\noptionalreturn num == 5\n}.count\nprint(total)",
            "var count = 0\nfor index in 0..<numbers.count {\nif numbers[index] == 5 {\ncount += 1\n}\n}\nprint(count)",
            "var count = 0\nfor index in 0...numbers.count - 1 {\nif numbers[index] == 5 {\ncount += 1\n}\n}\nprint(count)",
            "var count = 0\nfor index in 0...(numbers.count - 1) {\nif numbers[index] == 5 {\ncount += 1\n}\n}\nprint(count)",
            "var count = 0\nfor index in 0..<numbers.count {\nguard numbers[index] == 5 else { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...numbers.count - 1 {\nguard numbers[index] == 5 else { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...(numbers.count - 1) {\nguard numbers[index] == 5 else { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0..<numbers.count {\nif numbers[index] != 5 { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0..<numbers.count {\nif numbers[index] != 5 {\ncontinue\n}\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0..<numbers.count {\nif numbers[index] != 5 {\ncontinue\n}else{\ncount += 1\n}\n}\nprint(count)",
            "var count = 0\nfor index in 0...numbers.count - 1 {\nif numbers[index] != 5 { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...numbers.count - 1 {\nif numbers[index] != 5 {\ncontinue\n}\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...numbers.count - 1 {\nif numbers[index] != 5 {\ncontinue\n}else{\ncount += 1\n}\n}\nprint(count)",
            "var count = 0\nfor index in 0...(numbers.count - 1) {\nif numbers[index] != 5 { continue }\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...(numbers.count - 1) {\nif numbers[index] != 5 {\ncontinue\n}\ncount += 1\n}\nprint(count)",
            "var count = 0\nfor index in 0...(numbers.count - 1) {\nif numbers[index] != 5 {\ncontinue\n}else{\ncount += 1\n}\n}\nprint(count)",
            "print(numbers.filter{num in optionalreturn num == 5}.count)",
            "print(numbers.filter{optionalreturn $0 == 5}.count)",
            "var count = 0\nfor n in numbers where n == 5 {\ncount += 1\n}\nprint(count)"
        ]
    },
    {
        "question": "Write code that doubles all the numbers in this array.",
        "hint": "You can solve this using a <code>for</code> loop.",
        "startingCode": "let numbers = [1, 3, 5, 7, 9]",
        "answers": [
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nnewArray.append(number * 2)\n}",
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nnewArray.append(2 * number)\n}",
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nletvar doubled:Int = number * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nletvar doubled:Int = 2 * number\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nletvar doubled:Int\ndoubled = number * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor number in numbers{\nletvar doubled:Int\ndoubled = 2 * number\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nnewArray.append(number * 2)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nnewArray.append(2 * number)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nletvar doubled:Int = number * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nletvar doubled:Int = 2 * number\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nletvar doubled:Int\ndoubled = number * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = []\nfor number in numbers{\nletvar doubled:Int\ndoubled = 2 * number\nnewArray.append(doubled)\n}",
            "letvar newArray:[Int] = numbers.map{optionalreturn $0 * 2}",
            "letvar newArray:[Int] = numbers.map{num in optionalreturn num * 2}",
            "letvar newArray:[Int] = numbers.map{num in\noptionalreturn num * 2\n}",
            "letvar newArray:[Int] = numbers.map{optionalreturn 2 * $0}",
            "letvar newArray:[Int] = numbers.map{num in optionalreturn 2 * num}",
            "letvar newArray:[Int] = numbers.map{num in\noptionalreturn 2 * num\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nnewArray.append(numbers[i] * 2)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nnewArray.append(2 * numbers[i])\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nnewArray.append(numbers[i] * 2)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nnewArray.append(2 * numbers[i])\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nnewArray.append(numbers[i] * 2)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nnewArray.append(2 * numbers[i])\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nletvar doubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nletvar doubled = 2 * numbers[i]\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nletvar doubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nletvar doubled = 2 * numbers[i]\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nletvar doubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nletvar doubled = 2 * numbers[i]\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nletvar doubled:Int\ndoubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0..<numbers.count{\nletvar doubled:Int\ndoubled = 2 * numbers[i]\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nletvar doubled:Int\ndoubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...numbers.count - 1{\nletvar doubled:Int\ndoubled = 2 * numbers[i]\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nletvar doubled:Int\ndoubled = numbers[i] * 2\nnewArray.append(doubled)\n}",
            "var newArray:[Int] = [Int]()\nfor i in 0...(numbers.count - 1){\nletvar doubled:Int\ndoubled = 2 * numbers[i]\nnewArray.append(doubled)\n}"
        ]
    },
    {
        "question": "Write code that creates an array containing all the people with the first name Terry.",
        "hint": "You can solve this using a <code>for</code> loop.",
        "startingCode": "let names = [\"Terry Jones\", \"John Terry\", \"Terry Crews\", \"Terry Farrell\", \"Samuel Terry\"]",
        "answers": [
            "var parsed:[String] = [String]()\nfor name in names {\n\tif name.hasPrefix(\"Terry\") {\n\t\tparsed.append(name)\n\t}\n}",
            "var parsed:[String] = [String]()\nfor name in names {\n\tif name.hasPrefix(\"Terry \") {\n\t\tparsed.append(name)\n\t}\n}",
            "var parsed = [String]()\nfor name in names {\nguard name.hasPrefix(\"Terry\") else { continue }\nparsed.append(name)\n}",
            "var parsed = [String]()\nfor name in names {\nguard name.hasPrefix(\"Terry \") else { continue }\nparsed.append(name)\n}",
            "var parsed:[String] = [String]()\nfor name in names {\n\tif name.split(separator: \" \")[0] == \"Terry\" {\n\t\tparsed.append(name)\n\t}\n}",
            "var parsed = [String]()\nfor name in names {\nguard name.split(separator: \" \")[0] == \"Terry\" else { continue }\nparsed.append(name)\n}",
            "letvar parsed2:[String] = names.filter{optionalreturn $0.hasPrefix(\"Terry\")}",
            "letvar parsed2:[String] = names.filter{optionalreturn $0.hasPrefix(\"Terry \")}",
            "var parsed2 = [String]()\nparsed2 = names.filter{optionalreturn $0.hasPrefix(\"Terry\")}",
            "var parsed2 = [String]()\nparsed2 = names.filter{optionalreturn $0.hasPrefix(\"Terry \")}",
            "letvar parsed2:[String] = names.filter{optionalreturn $0.split(separator: \" \")[0] == \"Terry\"}",
            "var parsed2 = [String]()\nparsed2 = names.filter{optionalreturn $0.split(separator: \" \")[0] == \"Terry\"}",
            "letvar parsed3:[String] = names.filter{name in\n\toptionalreturn name.hasPrefix(\"Terry\")\n}",
            "letvar parsed3:[String] = names.filter{name in\n\toptionalreturn name.hasPrefix(\"Terry \")\n}",
            "var parsed3 = [String]()\nparsed3 = names.filter{name in\n\toptionalreturn name.hasPrefix(\"Terry\")\n}",
            "var parsed3 = [String]()\nparsed3 = names.filter{name in\n\toptionalreturn name.hasPrefix(\"Terry \")\n}",
            "letvar parsed3:[String] = names.filter{name in\n\toptionalreturn name.split(separator: \" \")[0] == \"Terry\"\n}",
            "var parsed3 = [String]()\nparsed3 = names.filter{name in\n\toptionalreturn name.split(separator: \" \")[0] == \"Terry\"\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nif names[i].hasPrefix(\"Terry\") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nif names[i].hasPrefix(\"Terry \") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nif names[i].hasPrefix(\"Terry\") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nif names[i].hasPrefix(\"Terry \") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nif names[i].hasPrefix(\"Terry\") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nif names[i].hasPrefix(\"Terry \") {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nguard names[i].hasPrefix(\"Terry\") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nguard names[i].hasPrefix(\"Terry \") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nguard names[i].hasPrefix(\"Terry\") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nguard names[i].hasPrefix(\"Terry \") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nguard names[i].hasPrefix(\"Terry\") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nguard names[i].hasPrefix(\"Terry \") else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nguard !names[i].hasPrefix(\"Terry\") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nguard !names[i].hasPrefix(\"Terry \") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nguard !names[i].hasPrefix(\"Terry\") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nguard !names[i].hasPrefix(\"Terry \") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nguard !names[i].hasPrefix(\"Terry\") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nguard !names[i].hasPrefix(\"Terry \") else {\nresult.append(names[i])\ncontinue\n}\ncontinue\n}",
            "var result:[String] = [String]()\nfor i in 0..<names.count {\nif names[i].split(separator: \" \")[0] == \"Terry\" {\nresult.append(names[i])\n}\n}",
            "var result:[String] = [String]()\nfor i in 0...names.count - 1 {\nif names[i].split(separator: \" \")[0] == \"Terry\" {\nresult.append(names[i])\n}\n}",
            "var result:[String] = [String]()\nfor i in 0...(names.count - 1) {\nif names[i].split(separator: \" \")[0] == \"Terry\" {\nresult.append(names[i])\n}\n}",
            "var result = [String]()\nfor i in 0..<names.count {\nguard names[i].split(separator: \" \")[0] == \"Terry\" else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...names.count - 1 {\nguard names[i].split(separator: \" \")[0] == \"Terry\" else { continue }\nresult.append(names[i])\n}",
            "var result = [String]()\nfor i in 0...(names.count - 1) {\nguard names[i].split(separator: \" \")[0] == \"Terry\" else { continue }\nresult.append(names[i])\n}"
        ]
    },
    {
        "question": "Create a <code>Player</code> struct with a <code>score</code> integer property that has a property observer so that whenever the score has changed it prints \"The score is now\" followed by the new score value.",
        "hint": "You can solve this using a <code>didSet</code> property observer.",
        "startingCode": "",
        "answers": [
            "struct Player {\n\tletvar score:Int {\n\t\tdidSet {\n\t\t\tprint(\"The score is now \\(score)\")\n\t\t}\n\t}\n}",
            "struct Player {\n\tletvar score:Int = 0 {\n\t\tdidSet {\n\t\t\tprint(\"The score is now \\(score)\")\n\t\t}\n\t}\n}",
            "struct Player {\n\tletvar score:Int {\n\t\tdidSet {\n\t\t\tprint(\"The score is now \\(score).\")\n\t\t}\n\t}\n}",
            "struct Player {\n\tletvar score:Int = 0 {\n\t\tdidSet {\n\t\t\tprint(\"The score is now \\(score).\")\n\t\t}\n\t}\n}"
        ]
    },
    {
        "question": "Write code that creates an array of all the items in <code>words</code>, capitalized. So, your finished array should contain THE, RAIN, IN, SPAIN.",
        "hint": "You can solve this using a <code>for</code> loop.",
        "startingCode": "let words = [\"The\", \"rain\", \"in\", \"Spain\"]",
        "answers": [
            "var uppercased1:[String] = [String]()\nfor word in words {\n\tuppercased1.append(word.uppercased())\n}",
            "var uppercased2:[String] = [String]()\nfor word in words {\n\tletvar upper = word.uppercased()\n\tuppercased2.append(upper)\n}",
            "letvar uppercased3:[String] = words.map {optionalreturn $0.uppercased()}",
            "letvar uppercased4:[String] = words.map {word in\n\toptionalreturn word.uppercased()\n}",
            "letvar uppercased4:[String] = words.map {word in optionalreturn word.uppercased()}",
            "var uppercased3 = [String]()\nuppercased3 = words.map {optionalreturn $0.uppercased()}",
            "var uppercased4 = [String]()\nuppercased4 = words.map {word in\n\toptionalreturn word.uppercased()\n}",
            "var uppercased4 = [String]()\nuppercased4 = words.map {word in optionalreturn word.uppercased()}",
            "var uppercased5:[String] = [String]()\nfor i in 0..<words.count {\n\tletvar uppercased = words[i].uppercased()\n\tuppercased5.append(uppercased)\n}",
            "var uppercased6:[String] = [String]()\nfor i in 0..<words.count {\n\tuppercased6.append(words[i].uppercased())\n}",
            "var uppercased5:[String] = [String]()\nfor i in 0...words.count - 1 {\n\tletvar uppercased = words[i].uppercased()\n\tuppercased5.append(uppercased)\n}",
            "var uppercased6:[String] = [String]()\nfor i in 0...words.count - 1 {\n\tuppercased6.append(words[i].uppercased())\n}",
            "var uppercased5:[String] = [String]()\nfor i in 0...(words.count - 1) {\n\tletvar uppercased = words[i].uppercased()\n\tuppercased5.append(uppercased)\n}",
            "var uppercased6:[String] = [String]()\nfor i in 0...(words.count - 1) {\n\tuppercased6.append(words[i].uppercased())\n}"
        ]
    },
    {
        "question": "Write code that loops from 1 through 100 to create an array of all even numbers.",
        "hint": "You'll need to use the division remainder operator, <code>%</code>, or the isMultiple(of:) method.",
        "startingCode": "",
        "answers": [
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\n\tif i % 2 == 0 {\n\t\teven1.append(i)\n\t}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nif i % 2 != 1 {\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nif i % 2 == 1 { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nif i % 2 == 1 {\ncontinue\n}\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nif i % 2 == 1 {\ncontinue\n}else{\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nguard i % 2 == 0 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nguard i % 2 != 0 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nguard i % 2 != 1 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nguard i % 2 == 1 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even2:[Int] = [Int]()\nfor i in 1...100 {\n\tletvar remainder = i % 2\n\tif remainder == 0 {\n\t\teven2.append(i)\n\t}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nif remainder != 1 {\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nif remainder == 1 { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nif remainder == 1 {\ncontinue\n}\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nif remainder == 1 {\ncontinue\n}else{\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nguard remainder == 0 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nguard remainder != 0 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nguard remainder != 1 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 {\nletvar remainder = i % 2\nguard remainder == 1 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1...100 where i % 2 == 0 {\neven1.append(i)\n}", // added this solution
            "var even3:[Int] = [Int]()\nfor i in 1..<101 {\n\tif i % 2 == 0 {\n\t\teven3.append(i)\n\t}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nif i % 2 != 1 {\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nif i % 2 == 1 { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nif i % 2 == 1 {\ncontinue\n}\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nif i % 2 == 1 {\ncontinue\n}else{\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nguard i % 2 == 0 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nguard i % 2 != 0 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nguard i % 2 != 1 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nguard i % 2 == 1 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even4:[Int] = [Int]()\nfor i in 1..<101 {\n\tletvar remainder = i % 2\n\tif remainder == 0 {\n\t\teven4.append(i)\n\t}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nif remainder != 1 {\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nif remainder == 1 { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nif remainder == 1 {\ncontinue\n}\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nif remainder == 1 {\ncontinue\n}else{\neven1.append(i)\n}\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nguard remainder == 0 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nguard remainder != 0 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nguard remainder != 1 else { continue }\neven1.append(i)\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 {\nletvar remainder = i % 2\nguard remainder == 1 else {\neven1.append(i)\ncontinue\n}\ncontinue\n}",
            "var even1:[Int] = [Int]()\nfor i in 1..<101 where i % 2 == 0 {\neven1.append(i)\n}", // added this solution
            "var even5:[Int] = [Int]()\nfor i in stride(from: 2, through: 100, by: 2) {\n\teven5.append(i)\n}",
            "letvar even6:[Int] = (1...100).filter { optionalreturn $0 % 2 == 0 }",
            "letvar even7:[Int] = (1...100).filter { num in optionalreturn num % 2 == 0 }",
            "letvar even8:[Int] = (1..<101).filter { optionalreturn $0 % 2 == 0 }",
            "letvar even9:[Int] = (1..<101).filter { num in optionalreturn num % 2 == 0 }"
        ]
    }
]
