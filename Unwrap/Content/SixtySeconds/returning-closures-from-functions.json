{
    "title": "Returning closures from functions",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "Make sure the returned closure accepts the right parameters and returns the right data type, if any.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "func createDoubler() -> (Int) -> Int {\n\treturn {\n\t\treturn $0 * 2\n\t}\n}\nlet doubler = createDoubler()\nprint(doubler(2))",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func makeGreeting(language: String) -> (String) -> Void {\n\tif language == \"French\" {\n\t\treturn {\n\t\t\tprint(\"Bonjour, \\($0)!\")\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tprint(\"Hello, \\($0)!\")\n\t\t}\n\t}\n}\nlet greeting = makeGreeting(language: \"English\")\ngreeting(\"Paul\")",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func createAgeCheck(strict: Bool) -> (Int) -> Bool {\n\tif strict {\n\t\treturn {\n\t\t\tif $0 <= 21 {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tif $0 <= 18 {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n}\nlet ageCheck = createAgeCheck(strict: true)\nlet result = ageCheck(20)\nprint(result)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func createTravelMethod(distance: Int) -> (String) -> Void {\n\tif distance < 5 {\n\t\treturn {\n\t\t\tprint(\"I'm walking to \\($0).\")\n\t\t}\n\t} else if distance < 20 {\n\t\treturn {\n\t\t\tprint(\"I'm cycling to \\($0).\")\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tprint(\"I'm driving to \\($0).\")\n\t\t}\n\t}\n}\nlet travelMethod = createTravelMethod(distance: 15)\ntravelMethod(\"London\")",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func createValidator() -> (String) -> Bool {\n\treturn {\n\t\tif $0 == \"twostraws\" {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n}\nlet validator = createValidator()\nprint(validator(\"twostraws\"))",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func makeRecorder(media: String) -> () -> String {\n\tswitch media {\n\tcase \"podcast\":\n\t\treturn {\n\t\t\treturn \"I'm recording a podcast\"\n\t\t}\n\tdefault:\n\t\treturn {\n\t\t\treturn \"I'm recording a video\"\n\t\t}\n\t}\n}\nlet recorder = makeRecorder(media: \"podcast\")\nprint(recorder())",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "func makeSharer(String) -> () -> String {\n\tswitch destination {\n\tcase \"Twitter\":\n\t\treturn {\n\t\t\treturn \"I'm writing a tweet\"\n\t\t}\n\tdefault:\n\t\treturn {\n\t\t\treturn \"I'm sending an email\"\n\t\t}\n\t}\n}\nlet sharer = makeSharer(destination: \"Twitter\")\nprint(sharer())",
            "reason": "The parameter to <code>makeSharer()<\/code> needs to have a name."
        },
        {
            "answer": "func makeCodeGenerator(language: String) -> () -> Void {\n\tif language == \"Swift\" {\n\t\treturn \"Swift rocks!\"\n\t} else {\n\t\treturn \"Other languages are pretty great too!\"\n\t}\n}\nlet generator = makeCodeGenerator(language: \"Swift\")\ngenerator()",
            "reason": "<code>makeCodeGenerator()<\/code> says it will return a closure, but instead returns a string."
        },
        {
            "answer": "func mealProducer() -> (Int) -> String {\n\treturn {\n\t\tprint(\"I'll make dinner for \\($0) people.\")\n\t}\n}\nlet makeDinner = mealProducer()\nprint(makeDinner(5))",
            "reason": "<code>mealProducer()<\/code> says it will return a closure that accepts an integer and returns a string, but it returns a closure that accepts a string and returns nothing."
        },
        {
            "answer": "func paintingMaker(medium: String) -> (String) -> Void {\n\tif medium == \"watercolor\" {\n\t\treturn {\n\t\t\tprint(\"I'm going to paint some flowers.\")\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tprint(\"I'm going to paint a landscape.\")\n\t\t}\n\t}\n}\nlet maker = paintingMaker(medium: \"watercolor\")\nmaker()",
            "reason": "<code>paintingMaker()<\/code> says it will return a closure that accepts a string and returns nothing, but the closure it returns accepts no parameters."
        },
        {
            "answer": "func catchPokemon(level: Int) -> () {\n\tif level < 10 {\n\t\treturn {\n\t\t\treturn \"Use a regular ball\"\n\t\t}\n\t} else if level < 20 {\n\t\treturn {\n\t\t\treturn \"Use a great ball\"\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\treturn \"Use an ultra ball\"\n\t\t}\n\t}\n}\nlet catcher = catchPokemon(level: 11)\nprint(catcher())",
            "reason": "<code>catchPokemon()<\/code> says it will return an empty tuple, not a closure."
        },
        {
            "answer": "func makeGame() -> Int -> Void {\n\treturn {\n\t\tif $0 <= 5 {\n\t\t\tprint(\"Let's play five-a-side football.\")\n\t\t} else {\n\t\t\tprint(\"Let's play regular football.\")\n\t\t}\n\t}\n}\nlet game = makeGame()\ngame(5)",
            "reason": "The return value of <code>makeGame()<\/code> needs to be written with parentheses around the parameter type: <code>(Int) -> Void<\/code>."
        }
    ]
}