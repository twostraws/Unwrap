{
    "title": "Initializers",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "Make sure all properties have a value before the initializer ends.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "struct Country {\n\tvar name: String\n\tvar usesImperialMeasurements: Bool\n\tinit(countryName: String) {\n\t\tname = countryName\n\t\tlet imperialCountries = [\"Liberia\", \"Myanmar\", \"USA\"]\n\t\tif imperialCountries.contains(name) {\n\t\t\tusesImperialMeasurements = true\n\t\t} else {\n\t\t\tusesImperialMeasurements = false\n\t\t}\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct PowerTool {\n\tvar name: String\n\tvar cost: Int\n}\nlet drill = PowerTool(name: \"Hammer Drill\", cost: 80)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Message {\n\tvar from: String\n\tvar to: String\n\tvar content: String\n\tinit() {\n\t\tfrom = \"Unknown\"\n\t\tto = \"Unknown\"\n\t\tcontent = \"Yo\"\n\t}\n}\nlet message = Message()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Cabinet {\n\tvar height: Double\n\tvar width: Double\n\tvar area: Double\n\tinit (itemHeight: Double, itemWidth: Double) {\n\t\theight = itemHeight\n\t\twidth = itemWidth\n\t\tarea = height * width\n\t}\n}\nlet drawers = Cabinet(itemHeight: 1.4, itemWidth: 1.0)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Experiment {\n\tvar cost = 0\n}\nlet lhc = Experiment(cost: 13_250_000_000)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Dictionary {\n\tvar words = Set<String>()\n}\nlet dictionary = Dictionary()",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "struct Wine {\n\tvar grape: String\n\tvar region: String\n}\nlet malbec = Wine(grapes: \"Malbec\", region: \"Cahors\")",
            "reason": "The <code>Wine<\/code> struct has a <code>grape<\/code> property, but this attempts to create an instance using <code>grapes<\/code>."
        },
        {
            "answer": "struct Book {\n\tvar title: String\n\tvar author: String\n\tinit(bookTitle: String) {\n\t\ttitle = bookTitle\n\t}\n}\nlet book = Book(bookTitle: \"Beowulf\")",
            "reason": "This code does not provide a value for the <code>author<\/code> property."
        },
        {
            "answer": "struct Sport {\n\tvar name: String\n\tvar isOlympicSport: Bool\n}\nlet chessBoxing = Sport(name: \"Chessboxing\", isOlympicSport: \"false\")",
            "reason": "The <code>isOlympicSport<\/code> property is a Boolean, but this attempts to create a <code>Sport<\/code> instance by providing with a string."
        },
        {
            "answer": "struct Media {\n\tvar type: String\n\tvar users: Int\n\tinit() {\n\t\t\n\t}\n}\nlet tv = Media(type: \"Television\", users: 10_000_000)",
            "reason": "This has a custom initializer that does not provide values for the two properties."
        },
        {
            "answer": "struct Tree {\n\tvar type: String\n\tvar hasFruit: Bool\n\tfunc init() {\n\t\ttype = \"Cherry\"\n\t\thasFruit = true\n\t}\n}\nlet cherryTree = Tree()",
            "reason": "<code>init()<\/code> should not have the <code>func<\/code> keyword before it."
        },
        {
            "answer": "struct Starship {\n\tvar name: String\n\tvar maxWarp: Double\n\tinit(starshipName: String) {\n\t\tname = starshipName\n\t}\n}\nlet voyager = Starship(starshipName: \"Voyager\")",
            "reason": "This code does not provide a value for the <code>maxWarp<\/code> property."
        }
    ]
}