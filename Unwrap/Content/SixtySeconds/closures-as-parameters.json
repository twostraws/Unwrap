{
    "title": "Closures as parameters",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "Make sure all the parameters and return values have the correct types.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "let awesomeTalk = {\n\tprint(\"Here's a great talk!\")\n}\nfunc deliverTalk(name: String, type: () -> Void) {\n\tprint(\"My talk is called \\(name)\")\n\ttype()\n}\ndeliverTalk(name: \"My Awesome Talk\", type: awesomeTalk)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let swanDive = {\n\tprint(\"SWAN DIVE!\")\n}\nfunc performDive(type dive: () -> Void) {\n\tprint(\"I'm climbing up to the top\")\n\tdive()\n}\nperformDive(type: swanDive)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let helicopterTravel = {\n\tprint(\"Get to the chopper!\")\n}\nfunc travel(by travelMeans: () -> Void) {\n\tprint(\"Let's go on vacation...\")\n\ttravelMeans()\n}\ntravel(by: helicopterTravel)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var payCash = {\n\tprint(\"Here's the money.\")\n}\nfunc buyClothes(item: String, using payment: () -> Void) {\n\tprint(\"I'll take this \\(item).\")\n\tpayment()\n}\nbuyClothes(item: \"jacket\", using: payCash)",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var goOnBike = {\n\tprint(\"I'll take my bicycle.\")\n}\nfunc race(using vehicleType: () -> Void) {\n\tprint(\"Let's race!\")\n\tvehicleType()\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "var learnWithUnwrap = {\n\tprint(\"Hey, this is fun!\")\n}\nfunc learnSwift(using approach: () -> Void) {\n\tprint(\"I'm learning Swift\")\n\tapproach()\n}\nlearnSwift(using: learnWithUnwrap)",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "let resignation = { (name: String) in\n\tprint(\"Dear \\(name), I'm outta here!\")\n}\nfunc printDocument(contents: () -> Void) {\n\tprint(\"Connecting to printer...\")\n\tprint(\"Sending document...\")\n\tcontents()\n}\nprintDocument(contents: resignation)",
            "reason": "<code>printDocument()<\/code> says its parameter must be a closure that accepts no parameters, but the closure it is given takes a string."
        },
        {
            "answer": "let evilRobot = {\n\tprint(\"EXTERMINATE\")\n}\nfunc buildRobot(personality: () -> Void) {\n\tprint(\"Time to turn on the robot!\")\n\tpersonality()\n}\nbuildRobot(using: evilRobot)",
            "reason": "The parameter should be named <code>personality<\/code>, not <code>using<\/code>."
        },
        {
            "answer": "let driveSafely = {\n\treturn \"I'm being a considerate driver\"\n}\nfunc drive(using driving: () -> Void) {\n\tprint(\"Let's get in the car\")\n\tdriving()\n\tprint(\"We're there!\")\n}\ndrive(using: driveSafely)",
            "reason": "<code>drive()</code> says its parameter must be a closure that accepts no parameters and returns nothing, but the closure it is given returns a string."
        },
        {
            "answer": "var playWithDog = {\n\tprint(\"Fetch!\")\n}\nfunc play(using playType: () -> Void) -> String {\n\tprint(\"Let's play a game\")\n\tplayType()\n}\nplay(using: playWithDog)",
            "reason": "The <code>play()</code> function says it will return a string, but does not return anything."
        },
        {
            "answer": "var makeFromStraw = {\n\tprint(\"Let's build it out of straw\")\n}\nfunc buildHouse(using buildingStyle: () -> Void) {\n\tbuildingStyle\n\tprint(\"It's ready - can anyone blow it down?\")\n}",
            "reason": "This code is missing parentheses after the call to <code>buildingStyle<\/code> – it should be <code>buildingStyle()<\/code>."
        },
        {
            "answer": "var swift {\n\tprint(\"Cool - I can use closures!\")\n}\nfunc writeCode(using language: () -> Void) {\n\tlanguage()\n\tprint(\"That'll be eleventy billion dollars, please.\")\n}",
            "reason": "<code>var swift {<\/code> is invalid syntax in Swift."
        }
    ]
}