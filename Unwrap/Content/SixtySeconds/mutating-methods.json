{
    "title": "Mutating methods",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "You may only change a struct's properties in a method if the method is marked <code>mutating<\/code>.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "struct Diary {\n\tvar entries: String\n\tmutating func add(entry: String) {\n\t\tentries += \"\\(entry)\"\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Bicycle {\n\tvar currentGear: Int\n\tmutating func changeGear(to newGear: Int) {\n\t\tcurrentGear = newGear\n\t\tprint(\"I'm now in gear \\(currentGear).\")\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Book {\n\tvar totalPages: Int\n\tvar pagesLeftToRead = 0\n\tmutating func read(pages: Int) {\n\t\tif pages < pagesLeftToRead {\n\t\t\tpagesLeftToRead -= pages\n\t\t} else {\n\t\t\tpagesLeftToRead = 0\n\t\t\tprint(\"I'm done!\")\n\t\t}\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct BankAccount {\n\tvar balance: Int\n\tmutating func donateToCharity(amount: Int) {\n\t\tbalance -= amount\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Surgeon {\n\tvar operationsPerformed = 0\n\tmutating func operate(on patient: String) {\n\t\tprint(\"Nurse, hand me the scalpel!\")\n\t\toperationsPerformed += 1\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "struct Delorean {\n\tvar speed = 0\n\tmutating func accelerate() {\n\t\tspeed += 1\n\t\tif speed == 88 {\n\t\t\ttravelThroughTime()\n\t\t}\n\t}\n\tfunc travelThroughTime() {\n\t\tprint(\"Where we're going we don't need roads.\")\n\t}\n}",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "struct Tree {\n\tvar height: Int\n\tmutating func grow() {\n\t\theight *= 1.001\n\t}\n}",
            "reason": "This code attempts to multiply an <code>Int<\/code> by a <code>Double<\/code>, which is not allowed."
        },
        {
            "answer": "struct Stapler {\n\tvar stapleCount: Int\n\tfunc staple() {\n\t\tif stapleCount > 0 {\n\t\t\tstapleCount -= 1\n\t\t\tprint(\"It's stapled!\")\n\t\t} else {\n\t\t\tprint(\"Please refill me.\")\n\t\t}\n\t}\n}",
            "reason": "The <code>staple()<\/code> method modifies a struct's property without being marked <code>mutating<\/code>."
        },
        {
            "answer": "struct Singer {\n\tvar name: String\n\tvar bankBalance: Double\n\tmutating func goOnTour(venues: Int) {\n\t\tprint(\"Come and see \\(name) live on stage!\")\n\t\tbankBalance += venues * 100_000\n\t}\n}",
            "reason": "<code>bankBalance<\/code> is a <code>Double<\/code>, and <code>venues * 100_000<\/code> will be an <code>Int<\/code>; it's not possible to add one to the other."
        },
        {
            "answer": "struct MeetingRoom {\n\tvar isBooked = true\n\tmutating book(for name: String) {\n\t\tif isBooked {\n\t\t\tprint(\"Sorry, the meeting room is already taken.\")\n\t\t} else {\n\t\t\tisBooked = true\n\t\t\tprint(\"It's reserved for \\(name).\")\n\t\t}\n\t}\n}",
            "reason": "The <code>book()<\/code> method is missing the <code>func<\/code> keyword."
        },
        {
            "answer": "struct Car {\n\tlet mileage: Int\n\tmutating func drive(distance: Int) {\n\t\tmileage += distance\n\t}\n}",
            "reason": "<code>mileage<\/code> is declared as a constant, so it can't be changed."
        },
        {
            "answer": "struct Switch {\n\tvar isOn: Bool\n\tmutating func toggle {\n\t\tif isOn {\n\t\t\tisOn == false\n\t\t} else {\n\t\t\tisOn == true\n\t\t}\n\t}\n}",
            "reason": "The <code>toggle()<\/code> method is missing parentheses."
        }
    ]
}