{
    "title": "Using closures as parameters when they return values",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "Make sure closures are called with their correct name.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "func encrypt(password: String, using algorithm: (String) -> String) {\n\tprint(\"Encrypting password...\")\n\tlet result = algorithm(password)\n\tprint(\"The result is \\(result)\")\n}\nencrypt(password: \"t4ylor\") { (password: String) in\n\tprint(\"Using top secret encryption!\")\n\treturn \"SECRET\" + password + \"SECRET\"\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func manipulate(numbers: [Int], using algorithm: (Int) -> Int) {\n\tfor number in numbers {\n\t\tlet result = algorithm(number)\n\t\tprint(\"Manipulating \\(number) produced \\(result)\")\n\t}\n}\nmanipulate(numbers: [1, 2, 3]) { number in\n\treturn number * number\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func activateAI(_ ai: () -> String) {\n\tprint(\"Let's see what this thing can do...\")\n\tlet result = ai()\n\tprint(result)\n}\nactivateAI {\n\treturn \"Come with me if you want to live.\"\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func increaseBankBalance(start: Double, interestCalculator: () -> Double) {\n\tprint(\"Your current balance is \\(start).\")\n\tlet interestRate = interestCalculator()\n\tlet withInterest = start * interestRate\n\tprint(\"You now have \\(withInterest).\")\n}\nincreaseBankBalance(start: 200.0) {\n\treturn 1.01\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func playSong(_ name: String, notes: () -> String) {\n\tprint(\"I'm going to play \\(name).\")\n\tlet playedNotes = notes()\n\tprint(playedNotes)\n}\nplaySong(\"Mary Had a Little Lamb\") {\n\treturn \"EDCDEEEDDDEGG\"\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func loadData(input: () -> String) {\n\tprint(\"Loading...\")\n\tlet str = input()\n\tprint(\"Loaded: \\(str)\")\n}\nloadData {\n\treturn \"He thrusts his fists against the posts\"\n}",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "func bakeCookies(number: Int, secretIngredient: () -> String) {\n\tfor _ in 0..<number {\n\t\tprint(\"Adding butter...\")\n\t\tprint(\"Adding flour...\")\n\t\tprint(\"Adding sugar...\")\n\t\tprint(\"Adding egg...\")\n\t\tlet extra = secretIngredient()\n\t\tprint(extra)\n\t}\n}\nbakeCookies(5) {\n\treturn \"Adding vanilla extract\"\n}",
            "reason": "The call to <code>bakeCookies()<\/code> is missing the <code>number<\/code> parameter label."
        },
        {
            "answer": "func goShopping(for item: String, decisionHandler: (String) -> Bool) {\n\tprint(\"I'm going to buy \\(item)\")\n\tif decisionHandler() == true {\n\t\tprint(\"Great! I bought them.\")\n\t} else {\n\t\tprint(\"Maybe next time...\")\n\t}\n}\ngoShopping(for: \"shoes\") { item in\n\tif item == \"shoes\" {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n}",
            "reason": "The call to <code>decisionHandler()<\/code> is missing its parameter."
        },
        {
            "answer": "func playMusic(randomizer: () -> String) {\n\tprint(\"\\(random()) is playing.\")\n}\nplayMusic {\n\tprint(\"Sorry, I only have one playlist!\")\n\treturn \"Taylor Swift\"\n}",
            "reason": "This tries to call <code>random<\/code>, when it ought to call <code>randomizer()<\/code>."
        },
        {
            "answer": "func printGreeting(for usernameLoader: (String) -> String) {\n\tlet username = usernameLoader()\n\tprint(\"Hello, \\(username)!\")\n}\nprintGreeting {\n\treturn \"twostraws\"\n}",
            "reason": "This does not pass in a parameter when calling <code>usernameLoader<\/code>."
        },
        {
            "answer": "func scoreToGrade(score: Int, gradeMapping: (Int) -> String) {\n\tprint(\"Your score was \\(score)%.\")\n\tlet result = gradeMapping(score)\n\tprint(\"That's a \\(result).\")\n}\nscoreToGrade(score: 80) { (grade: Int) in\n\tif grade < 85 {\n\t\treturn \"Fail\"\n\t}\n}",
            "reason": "The call to <code>scoreToGrade()<\/code> must return a value."
        },
        {
            "answer": "func teachLesson(name: String, topic: () -> String) {\n\tprint(\"Welcome to \\(name).\")\n\tprint(\"Please take out your laptops and be quiet at the back.\")\n\ttopic()\n\tprint(\"See you tomorrow!\")\n}\nteachLesson(name: \"Swift 101\") {\n\tprint(\"Swift is a modern language that can be used to make apps on iOS and more.\")\n}",
            "reason": "Whatever is given as a closure to <code>teachLesson<\/code> must return a string."
        }
    ]
}