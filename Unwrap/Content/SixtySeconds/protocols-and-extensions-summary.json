{
    "title": "Protocols and extensions: Summary",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "Only extensions contain method implementations. To conform to a protocol, all types must implement the protocol's methods.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "protocol Identifiable {\n\tvar id: Int { get set }\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "protocol SuitableForKids {\n\tvar minimumAge: Int { get set }\n\tvar maximumAge: Int { get set }\n}\nprotocol SupportsMultiplePlayers {\n\tvar minimumPlayers: Int { get set }\n\tvar maximumPlayers: Int { get set }\n}\nstruct FamilyBoardGame: SuitableForKids, SupportsMultiplePlayers {\n\tvar minimumAge = 3\n\tvar maximumAge = 110\n\tvar minimumPlayers = 1\n\tvar maximumPlayers = 4\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "protocol Inflatable {\n\tmutating func refillAir()\n}\nextension Inflatable {\n\tmutating func refillAir() {\n\t\tprint(\"Refilling the air.\")\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "extension Collection {\n\tfunc describe() {\n\t\tif count == 1 {\n\t\t\tprint(\"There is 1 item.\")\n\t\t} else {\n\t\t\tprint(\"There are \\(count) items.\")\n\t\t}\n\t}\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "protocol HasAge {\n\tvar age: Int { get set }\n\tmutating func celebrateBirthday()\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "protocol Paintable { }\nprotocol Tileable { }\nstruct Wall: Paintable, Tileable { }",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "protocol TravelsThroughTime {\n\tmutating func travel(to year: Int)\n}\nprotocol BiggerOnTheInside {\n\tfunc findSwimmingPool()\n}\nprotocol TARDIS: TravelsThroughTime BiggerOnTheInside {\n\tvar doctorNumber: Int { get set }\n}",
            "reason": "The two protocols that <code>TARDIS<\/code> conforms to should be separated by commas."
        },
        {
            "answer": "protocol Ridable\nprotocol Trainable\nprotocol Dog: Trainable",
            "reason": "The <code>Dog<\/code> protocol needs to have empty braces."
        },
        {
            "answer": "protocol HasPages {\n\tvar pageCount: Int\n}\nprotocol HasTableOfContents {\n\tvar titles: [String]\n}\nprotocol Book: HasPages, HasTableOfContents {\n\tvar author: String\n}",
            "reason": "All three properties here must have <code>{ get }<\/code> or <code>{ get set }<\/code> after them."
        },
        {
            "answer": "protocol NotAMoon { }\nprotocol HasExhaustPort { }\nstruct DeathStar: NotAMoon HasExhaustPort { }",
            "reason": "The two protocols that <code>DeathStar<\/code> conforms to should be separated by commas."
        },
        {
            "answer": "protocol CanFly {\n\tvar maximumFlightSpeed: Int { get set }\n}\nprotocol CanDrive {\n\tvar maximumDrivingSpeed: Int { get set }\n}\nstruct FlyingCar: CanFly, CanDrive { }",
            "reason": "The <code>FlyingCar<\/code> struct does not conform to the two protocols it says it does because it doesn't have the required properties."
        },
        {
            "answer": "protocol Adjustable {\n\tmutating func adjustValue(by amount)\n}",
            "reason": "The <code>adjustValue()<\/code> method is missing a type annotation for its parameter."
        }
    ]
}