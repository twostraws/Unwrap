{
    "title": "Extensions",
    "postscript": "",
    "reviewType": "singleSelection",
    "question": "This code is a valid extension \u2013 true or false?",
    "hint": "Extensions can add methods and computed properties, but not stored properties.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "extension Int {\n\tfunc cubed() -> Int {\n\t\treturn self * self * self\n\t}\n}",
            "reason": "This is a valid extension on <code>Int<\/code>."
        },
        {
            "answer": "extension String {\n\tfunc withPrefix(_ prefix: String) -> String {\n\t\tif self.hasPrefix(prefix) { return self }\n\t\treturn \"\\(prefix)\\(self)\"\n\t}\n}",
            "reason": "This is a valid extension on <code>String<\/code>."
        },
        {
            "answer": "extension String {\n\tvar isLong: Bool {\n\t\treturn count > 25\n\t}\n}",
            "reason": "This is a valid extension on <code>String<\/code>."
        },
        {
            "answer": "extension Double {\n\tvar isNegative: Bool {\n\t\treturn self < 0\n\t}\n}",
            "reason": "This is a valid extension on <code>Double<\/code>."
        },
        {
            "answer": "extension Int {\n\tfunc clamped(min: Int, max: Int) -> Int {\n\t\tif (self > max) {\n\t\t\treturn max\n\t\t} else if (self < min) {\n\t\t\treturn min\n\t\t}\n\t\treturn self\n\t}\n}",
            "reason": "This is a valid extension on <code>Int<\/code>."
        },
        {
            "answer": "extension String {\n\tfunc isUppercased() -> Bool {\n\t\treturn self == self.uppercased()\n\t}\n}",
            "reason": "This is a valid extension on <code>String<\/code>."
        }
    ],
    "wrong": [
        {
            "answer": "extension Int {\n\tvar isEven {\n\t\treturn self % 2 == 0\n\t}\n}",
            "reason": "<code>isEven<\/code> is missing a type annotation."
        },
        {
            "answer": "extension String {\n\tfunc append(_ other: String) {\n\t\tself += other\n\t}\n}",
            "reason": "The <code>append()<\/code> method must be marked <code>mutating<\/code>."
        },
        {
            "answer": "extension Bool {\n\tfunc toggled() -> Bool {\n\t\tif self = true {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n}",
            "reason": "<code>if self = true<\/code> should read <code>if self == true<\/code>."
        },
        {
            "answer": "ext Array {\n\tfunc summarize() {\n\t\tprint(\"The array has \\(count) items. They are:\")\n\t\tfor item in self {\n\t\t\tprint(item)\n\t\t}\n\t}\n}",
            "reason": "<code>ext<\/code> should read <code>extension<\/code>."
        },
        {
            "answer": "extension Int {\n\ttimes(_ action: () -> Void) {\n\t\tfor _ in 0..<self {\n\t\t\taction()\n\t\t}\n\t}\n}",
            "reason": "The <code>times()<\/code> method is missing the <code>func<\/code> keyword."
        },
        {
            "answer": "extension Int {\n\tvar isAnswerToLifeUniverseAndEverything: Bool {\n\t\tself == 42\n\t}\n}",
            "reason": "This computed property is missing the <code>return<\/code> keyword."
        }
    ]
}