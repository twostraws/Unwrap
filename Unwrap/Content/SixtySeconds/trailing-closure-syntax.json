{
    "title": "Trailing closure syntax",
    "postscript": "Trailing closure syntax might seem obscure or perhaps a bit weird at first, but it's used very commonly in Swift.",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "When using trailing closure syntax, you remove the final parameter name entirely and write your code after the function in braces.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "func tendGarden(activities: () -> Void) {\n\tprint(\"I love gardening\")\n\tactivities()\n}\ntendGarden {\n\tprint(\"Let's grow some roses!\")\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func repeatAction(count: Int, action: () -> Void) {\n\tfor _ in 0..<count {\n\t\taction()\n\t}\n}\nrepeatAction(count: 5) {\n\tprint(\"Hello, world!\")\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func doTricks(_ tricks: () -> Void) {\n\tprint(\"Start recording now!\")\n\ttricks()\n\tprint(\"Did you get all that?\")\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func goOnVacation(to destination: String, _ activities: () -> Void) {\n\tprint(\"Packing bags...\")\n\tprint(\"Getting on plane to \\(destination)...\")\n\tactivities()\n\tprint(\"Time to go home!\")\n}\ngoOnVacation(to: \"Mexico\") {\n\tprint(\"Go sightseeing\")\n\tprint(\"Relax in sun\")\n\tprint(\"Go hiking\")\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func goCamping(then action: () -> Void) {\n\tprint(\"We're going camping!\")\n\taction()\n}\ngoCamping {\n\tprint(\"Sing songs\")\n\tprint(\"Put up tent\")\n\tprint(\"Attempt to sleep\")\n}",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func makeCake(instructions: () -> Void) {\n\tprint(\"Wash hands\")\n\tprint(\"Collect ingredients\")\n\tinstructions()\n\tprint(\"Here's your cake!\")\n}\nmakeCake {\n\tprint(\"Mix egg and flour\")\n}",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "func clean(tasks: () -> Void) {\n\tprint(\"It's time to clean the house.\")\n\ttasks()\n}\nclean [\n\tprint(\"I'm going to clean the kitchen.\")\n\tprint(\"I'm going to tidy the study.\")\n\tprint(\"I'm going to nuke the kids' room.\")\n]",
            "reason": "Trailing closure syntax should use braces rather than brackets."
        },
        {
            "answer": "func assembleToy(instruction: () -> Void) {\n\tinstructions()\n\tprint(\"It's done!\")\n}\nassembleToy {\n\tprint(\"Grok the glib\")\n\tprint(\"Flop the flip\")\n\tprint(\"Click the clack\")\n}",
            "reason": "The parameter is called <code>instruction<\/code> but the code attempts to call <code>instructions()<\/code>."
        },
        {
            "answer": "func brewTea(steps: ()) {\n\tprint(\"Get tea\")\n\tprint(\"Get milk\")\n\tprint(\"Get sugar\")\n\tsteps()\n}\nbrewTea {\n\tprint(\"Brew tea in teapot.\")\n\tprint(\"Add milk to cup\")\n\tprint(\"Pour tea into cup\")\n\tprint(\"Add sugar to taste.\")\n}",
            "reason": "The <code>steps<\/code> parameter is defined as an empty tuple, not a closure."
        },
        {
            "answer": "func knitSweater(then: () -> Void) {\n\tprint(\"Buy wool\")\n\tfor _ in 1...100 {\n\t\tprint(\"Knit knit knit...\")\n\t}\n\taction()\n}\nknitSweater {\n\tprint(\"Who wants to buy a sweater?\")\n}",
            "reason": "The <code>knitSweater<\/code> method accepts a parameter called <code>then<\/code>, but attempts to call <code>action()<\/code>."
        },
        {
            "answer": "func phoneFriend(conversation: () -> Void) {\n\tprint(\"Calling 555-1234...\")\n\tconversation()\n}\nphoneFriend:\n\tprint(\"Hello!\")\n\tprint(\"A foreign prince wants to give you $5 million.\")\n\tprint(\"What are your bank details?\")",
            "reason": "Trailing closure syntax should use braces."
        },
        {
            "answer": "func holdClass(name: String, lesson: () -> Void) {\n\tprint(\"Welcome to \\(name)!\")\n\tlesson()\n\tprint(\"Make sure your homework is done by next week.\")\n}\nholdClass(\"Philosophy 101\", lesson:) {\n\tprint(\"All we are is dust in the wind, dude.\")\n}",
            "reason": "When using trailing closure syntax we should miss off the final parameter name."
        }
    ]
}